pipeline {
    
    agent none


    stages {
        stage('Build') {
            agent {
                docker {
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when {
                changeset "**/worker/**"
            }
            steps {
                echo 'Compiling worker app'
                dir('worker'){
                    sh 'mvn compile'
                }
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                    
                    // -v /usr/local/bin/docker:/usr/local/bin/docker \
                    // -v /var/run/docker.sock:/var/run/docker.sock \
                    // --user root 

                }
            }
            when {
                changeset "**/worker/**"
            }
            steps {
                echo 'Running Unit Tests on worker app'
                dir('worker'){
                    sh 'mvn clean test'
                }
            }
        }
        stage('Package') {
            agent {
                docker {
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'

                    // -v /usr/local/bin/docker:/usr/local/bin/docker \
                    // -v /var/run/docker.sock:/var/run/docker.sock \
                    // --user root 

                }
            }
            when {
                branch 'master'
                changeset "**/worker/**"
            }
            steps {
                echo 'Packaging worker app'
                dir('worker'){
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }
        stage('Docker-Package') {
            agent any
            // when {
            //     branch 'master'
            //     changeset "**/worker/**"
            // }
            steps {
                echo 'Packaging worker app with docker'
                script {
                    docker.withRegistry('https://registry.hub.docker.com',, 'dockerlogin') {
                        def workerImage = docker.build("tblandford/lfd261-worker:v${env.BUILD_ID}", './worker')
                        workerImage.push()
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Build pipeline for worker is complete'
        }
        success {
            slackSend (channel: "instavote-cd", message: "Build success - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|open>)")
        }
        failure {
            slackSend (channel: "instavote-cd", message: "Build failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|open>)")
        }
    }
}

